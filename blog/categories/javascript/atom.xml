<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | icepro`s Blog]]></title>
  <link href="http://iceprosurface.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://iceprosurface.com/"/>
  <updated>2016-03-03T22:46:49+08:00</updated>
  <id>http://iceprosurface.com/</id>
  <author>
    <name><![CDATA[icepro]]></name>
    <email><![CDATA[iceprosurface@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Javascript]原型方法，对象方法和类方法的个人整理]]></title>
    <link href="http://iceprosurface.com/blog/2016/03/02/js-iife/"/>
    <updated>2016-03-02T14:54:51+08:00</updated>
    <id>http://iceprosurface.com/blog/2016/03/02/js-iife</id>
    <content type="html"><![CDATA[<blockquote><p>本文受<a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html">阮一峰Javascript模块化编程</a> 启发
本文受<a href="http://www.cnblogs.com/yunfour/p/3946444.html">js中使用使用原型（prototype）定义方法的好处</a> 启发
本文受<a href="http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html">深入理解JavaScript系列（4）：立即调用的函数表达式</a> 启发</p></blockquote>

<h1>函数的基本声明方法</h1>

<p>首先记录一下常见的几种函数声明方法</p>

<ul>
<li>函数声明 function fname(){}</li>
<li>函数表达式声明 var fname = function(){}</li>
<li>匿名表达式 function(){}</li>
</ul>


<h2>关于立即执行函数的解析</h2>

<p> 在js中，使用一个函数通常使用fname();的方式来执行函数表达式,但是假如我们用的不是函数声明而是表达式声明的话,我们会发现有趣的一点：基于这一点我们可以在声明完函数后立即使用函数，这种函数被称为立即执行函数比如：</p>

<p> 你会发现所谓的fname()中的fname就是function的引用，那么我们为什么不直接在后面加上()让他执行呢？基于这一点我们可以在声明完函数后立即使用函数，这种函数被称为立即执行函数比如：</p>

<blockquote><ul>
<li>(function(){})();</li>
<li>(function(){}());</li>
</ul>
</blockquote>

<p> 这两种形式通过()操作让解释器认为这个function是一个函数表达式，也就可以声明一个立即执行函数，同样的只要是对函数表达式声明进行操作的运算符都可以触发这个效果，所以同理~/！/-/+也同样可以触发该项操作比如</p>

<blockquote><ul>
<li>-function(){}();</li>
<li>+function(){}();</li>
<li>~function(){}();</li>
<li>!function(){}();</li>
</ul>
</blockquote>

<p> 如果你不嫌麻烦完全可以用上面那些方法声明一个表达式，但是显然这不是阅读良好的程序，因为你必须吧框框拉倒最后去看看有没有一个()</p>

<p> 所以在诸如jquery等常见的类库都是用了()来执行，目的是防止阅读障碍。这个解析主要是后面整理的前置知识。</p>

<h1>对象方法</h1>

<p> 对象方法可以这么理解：如果类生成一个实例，那么该实例就能使用该方法</p>

<p> 比如下面这个例子：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="kd">var</span> <span class="nx">module1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="err">　　　　</span><span class="nx">_count</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="err">　　　　</span><span class="nx">m1</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'><span class="err">　　　　　　</span><span class="c1">//&amp;hellip;</span>
</span><span class='line'><span class="err">　　　　</span><span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="err">　　　　</span><span class="nx">m2</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'><span class="err">　　　　　　</span><span class="c1">//&amp;hellip;</span>
</span><span class='line'><span class="err">　　　　</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="err">　　</span><span class="p">});</span>
</span><span class='line'><span class="nx">module1</span><span class="p">.</span><span class="nx">m1</span><span class="p">();</span>
</span><span class='line'><span class="nx">module1</span><span class="p">.</span><span class="nx">m2</span><span class="p">();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>  上面的函数m1()和m2()，都封装在module1对象里。使用的时候，就是调用这个对象的属性。</p>

<h1>类方法</h1>

<p>类方法简单的讲：不需要通过生成实例就可以使用的方法</p>

<p>比如下面这个例子：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">fname</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// private</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">className</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">fname</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="c1">// public</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">hello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 类方法</span>
</span><span class='line'><span class="nx">fname</span><span class="p">.</span><span class="nx">Run</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="c1">// 类方法的使用</span>
</span><span class='line'><span class="nx">fname</span><span class="p">.</span><span class="nx">Run</span><span class="p">();</span>
</span><span class='line'><span class="nx">fname</span><span class="p">.</span><span class="nx">hello</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>上面的函数Run()和hello()，都封装在fname类里。使用的时候，不需要生成一个实例就可以直接使用。</p>

<h1>原型方法</h1>

<p>原型方法简单的将就是：主要是用来对已有的对象进行扩展，例如Array数组没有什么方法，你可以为其增加原型方法，那么创建的数组就拥有了该方法。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">fname</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayName</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fname1</span><span class="o">=</span><span class="k">new</span> <span class="nx">fname</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">fname1</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="nx">fname1</span><span class="p">.</span><span class="nx">sayName</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>假设说我已经通过一个类生成了一堆对象，那么现在我需要对某个方法进行补充那么就可以通过这个原型方法为这些方法补充原型方法。</p>

<p>除此以外，原型方法本质上是一种指针，指向的是对应的prototype对象，不需要对每一个方法扩展内存，所以许多前端工程师都推荐使用原型方法来命名以减少内存消耗。</p>
]]></content>
  </entry>
  
</feed>
