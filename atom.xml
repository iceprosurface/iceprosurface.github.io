<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[icepro`s Blog]]></title>
  <link href="http://iceprosurface.com/atom.xml" rel="self"/>
  <link href="http://iceprosurface.com/"/>
  <updated>2016-02-27T18:47:28+08:00</updated>
  <id>http://iceprosurface.com/</id>
  <author>
    <name><![CDATA[icepro]]></name>
    <email><![CDATA[iceprosurface@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[angular 2nd]]></title>
    <link href="http://iceprosurface.com/blog/2016/02/27/angular-2nd/"/>
    <updated>2016-02-27T14:39:34+08:00</updated>
    <id>http://iceprosurface.com/blog/2016/02/27/angular-2nd</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Octopress]基础指引]]></title>
    <link href="http://iceprosurface.com/blog/2016/02/27/octopress-base/"/>
    <updated>2016-02-27T13:40:54+08:00</updated>
    <id>http://iceprosurface.com/blog/2016/02/27/octopress-base</id>
    <content type="html"><![CDATA[<h2>坑爹的Octopress！</h2>

<hr />

<p>传说中号称黑客使用的博客的确名不虚传，至少我是花了不少时间去研究这个博客系统的，嫌麻烦的推荐还是直接上wordpress算了，简单多了。
现在正式的把blog迁移到了github上，绑定了自己的域名，这里记录一下安装过程中的一些问题，或许可以帮助后来者少走一点弯路。</p>

<h2>准备工作</h2>

<hr />

<p>首先，强调三遍！</p>

<p>使用win安装会非常麻烦!</p>

<p>使用win安装会非常麻烦！</p>

<p>使用win安装会非常麻烦！</p>

<p>这些麻烦的地方并不是应用本身的问题，而是相关依赖软件的问题导致的。
如果你在完成前期安装后还能继续下去的话，那正文开始！</p>

<!--more-->


<p>由于Octopress是基于jekyll的，所以首先我们要安装关于jekyll的相关依赖
那么你需要安装以下所有的软件
  * ruby
  * python
  * DevKit
  * gem
  * git
再次之中你可能会碰到各种个样的问题，不过这些多数是系统变量设置的问题，这些问题都可以经过百度快速解决，so，本文将不对此处做出详细解释。
你可能会发现在国内使用gem源大多有点问题，可能是没有办法使用的。
这样我们可能需要改几个CDN源位置，具体可以到各自的官网去查询，这里我使用的是淘宝源</p>

<blockquote><p><a href="https://ruby.taobao.org/" title="淘宝源">淘宝源</a></p></blockquote>

<h2>安装依赖</h2>

<p>安装依赖项目</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd octopress
</span><span class='line'>ruby --version # Should report Ruby 1.9.2
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>然后使用默认主题（你可以自己下载主题，具体每个主题的制作者都会给出教程）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h2>配置Octopress</h2>

<p>首先它不支持中文，我们先要添加中文支持
\lib\ruby\gems(version)\gems\jekyll-(version)\lib\jekyll\</p>

<figure class='code'><figcaption><span>convertible.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="nb">name</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改为</p>

<figure class='code'><figcaption><span>convertible.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">base</span><span class="err">，</span> <span class="nb">name</span><span class="p">),</span><span class="ss">:encoding</span> <span class="o">=&gt;</span> <span class="s2">&quot;utf-8&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>特殊情况下你可能需要在环境变量中添加</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LANG=zh_cn.UTF-8
</span><span class='line'>LC_ALL=zh_cn.UTF-8</span></code></pre></td></tr></table></div></figure>


<p>将octopress的文件夹下的<em>config.yml的编码改成UTF-8,修改</em>config.yml，修改url、title、subtitle、author等等。</p>

<h2>移除关于Twitter，google+，google API的支持</h2>

<p>这里内容太多了，得按照各自的主题慢慢修改了</p>

<h2>写博文</h2>

<p>利用rake new_post[&ldquo;title&rdquo;];可以生成一个新的博文
然后我们可以写个bat来快速开启</p>

<figure class='code'><figcaption><span>"new.bat" </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>F:
</span><span class='line'><span class="nb">cd </span>F:<span class="se">\b</span>log<span class="se">\b</span>g
</span><span class='line'>rake new_post
</span><span class='line'>pause
</span></code></pre></td></tr></table></div></figure>


<p>然后我不懂ruby，不过修改一下文件还是没有问题的
寻找根目录下的rakefile文件中这里一段</p>

<figure class='code'><figcaption><span>rakefile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:new_post</span><span class="p">,</span> <span class="ss">:title</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span></code></pre></td></tr></table></div></figure>


<p>在</p>

<figure class='code'><figcaption><span>rakefile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">filename</span> <span class="o">=</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">file_root</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">to_url</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">new_post_ext</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="o">--&gt;</span> <span class="nb">puts</span> <span class="s2">&quot;now is open by notepad++:</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="o">--&gt;</span> <span class="nb">system</span> <span class="s2">&quot;start opennote.bat </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加箭头处的两段代码</p>

<figure class='code'><figcaption><span>new.bat </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">system</span> <span class="s2">&quot;start opennote.bat </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后创建一个opennote.bat放在更目录下（前提是你用的编辑器必须在windows变量中包含在可以用这个bat）</p>

<figure class='code'><figcaption><span>"new.bat" lang=bash </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="k">for</span> <span class="nv">%%a</span> in (<span class="nv">%1</span>) <span class="k">do</span> (
</span><span class='line'><span class="k">if</span> not <span class="nv">%%a</span> <span class="o">equ</span> <span class="s2">&quot;&quot;</span> (
</span><span class='line'>  start notepad++ <span class="nv">%%a</span>
</span><span class='line'>)
</span><span class='line'>)
</span><span class='line'>exit
</span></code></pre></td></tr></table></div></figure>


<p>然后以后双击new.bat就可以直接写了（讲道理win的控制台太烂了）
如果你是在github部署的话可能会遇到和我的一样问题就是CNAME文件无法被识别
据我所知作者是加入了CNAME识别的我看不懂ruby语言，但不妨碍我加一个识别进去</p>

<figure class='code'><figcaption><span>makefile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">FileList</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">args</span><span class="o">.</span><span class="n">source</span><span class="si">}</span><span class="s2">/**/.*&quot;</span><span class="o">].</span><span class="n">exclude</span><span class="p">(</span><span class="s2">&quot;**/.&quot;</span><span class="p">,</span> <span class="s2">&quot;**/..&quot;</span><span class="p">,</span> <span class="s2">&quot;**/.DS_Store&quot;</span><span class="p">,</span> <span class="s2">&quot;**/._*&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span></code></pre></td></tr></table></div></figure>


<p>加入CNAME文件的识别</p>

<figure class='code'><figcaption><span>makefile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">FileList</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">args</span><span class="o">.</span><span class="n">source</span><span class="si">}</span><span class="s2">/**/.*&quot;</span><span class="p">,</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">args</span><span class="o">.</span><span class="n">source</span><span class="si">}</span><span class="s2">/CNAME&quot;</span><span class="o">].</span><span class="n">exclude</span><span class="p">(</span><span class="s2">&quot;**/.&quot;</span><span class="p">,</span> <span class="s2">&quot;**/..&quot;</span><span class="p">,</span> <span class="s2">&quot;**/.DS_Store&quot;</span><span class="p">,</span> <span class="s2">&quot;**/._*&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就ok了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[angular.js]第一章 基础知识篇]]></title>
    <link href="http://iceprosurface.com/blog/2016/02/26/angular-1st/"/>
    <updated>2016-02-26T19:56:38+08:00</updated>
    <id>http://iceprosurface.com/blog/2016/02/26/angular-1st</id>
    <content type="html"><![CDATA[<blockquote><p>重要信息：在阅读该博文前请确保有以下前置知识：1) htm  2) javascript   3) css</p></blockquote>

<h2>一.介绍</h2>

<hr />

<p>为什么我开始学习使用angular.js？这得从知乎大佬的一片文章说起，时间有点久远了，链接是给不出了。这里大致说一下，大意就是，要往深处学习，沿着陡峭的web前端知识向上攀爬，最先走过的是原生javascript->随后就是最好的用jquery->下一步便是angular.js顺便还提及了ext.js。
对于前两个我有着大量的使用经验，从最开始简单的js写了大量的代码完成一个精美漂亮的照片墙（高仿版），到jquery数行代码结合插件快速完成开发，这些过程有着大量的成就感，但是随着越来越多的应用开发使用（其实只是自己做着玩的东西），发现随着应用逻辑的快速增长，代码越来越长直到最后难以维护，大量重复冗余的代码堆积，然后就学习了原型方法，使用各种模型方法来简化代码，增加复用，现在，有一个大佬告诉了我一个新的解决方案&ndash;angular.js
记得学java的时候有一个很不错的特性&ndash;依赖注入（ioc），没记错的话这是一种被称为AOP面切面的编程思想，具体怎么样早就忘记了，据说angular.js就可以做到这种操作具体的将就是
<code>反正我不用考虑程序是怎么完成操作的，我只需要完成程序预定的接口就可以完成具体的操作。</code></p>

<!--more-->


<h2>二.配置angular.js环境</h2>

<hr />

<p>讲道理其实并不需要什么配置，我们需要做的是跑到github上下载就好，也可以直接从google上下载，百度上下载都可以,也可以下载本站的内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>三.第一个helloworld程序</h2>

<hr />

<p>不论任何语言，第一条永远都是创建一个helloworld程序</p>

<p>首先，我们需要准备以下几个文件：</p>

<ul>
<li>hello.html</li>
<li>controllers.js</li>
<li>angular.min.js</li>
</ul>


<p>随后我们需要编辑上述的第一个和第二个文件</p>

<figure class='code'><figcaption><span>hello.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&quot;HelloApp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./controllers.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;HelloController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label&gt;</span>Name:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;meeting.text&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Enter a name here&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;hr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span>Hello !<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>controllers.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">HelloModule</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;HelloApp&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'><span class="nx">HelloModule</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;HelloController&quot;</span><span class="p">,</span>
</span><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">){</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">meeting</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="o">:</span><span class="s1">&#39;icepro&#39;</span><span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然我不是很懂这些代码中间是怎么操作的不过我只要知道他能完成什么就行了</p>

<p><img src="http://iceprosurface.com/images/effect.png" alt="效果图" /></p>

<p>看这个就是最后的效果，你可以随意更改内容，他会简单的将input同步到到那个被标记的变量的地方。</p>

<p>是不是发现什么诀窍了？对！使用这个我们不需要再去考虑繁琐的dom元素操作了，在这之前，我们可能需要在div上设置一系列的id，用jquery+原生js取子元素，获取<P>的html属性然后修改。而现在不需要了！</p>

<h2>四.例子详解</h2>

<hr />

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&quot;HelloApp&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先我们将ng-app绑定到了html元素上,这个属性是用来声明angular程序的边界的，这里的边界就是整个html标签，当然了你也可以这么设置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>……
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-app=</span><span class="s">&quot;HelloApp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  ……
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>……
</span></code></pre></td></tr></table></div></figure>


<p>这样就把程序设定为该个div以内，保证不影响其他的dom元素。
然后就是controller元件，angular.js同许多后台框架一样，拥有层次较为清晰的mvc架构。
所以有一个controller也是理所应当的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="kd">var</span> <span class="nx">HelloModule</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;HelloApp&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我比较倾向于称为实例化一个helloapp模块，简单的将就是调用angular生成了一个helloapp模块，这里的我没有看过源码比较大的可能就是直接把一个原始模块的prototype方法直接赋予了这个controller，这样就在全局作用中注册了这模块。
随后我们在这个模块中注册了名为hellocontroller的控制器。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">HelloModule</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;HelloController&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">meeting</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;text&#39;</span><span class="o">:</span><span class="s1">&#39;hi&#39;</span><span class="p">};</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>在注册完所有的控制器模块后。相应的，我们可以简单的在这个控制器的作用范围中使用(标记为ng-controller=&ldquo;HelloController&rdquo;)调用任何在这个控制器中声明的方法和变量。</p>
]]></content>
  </entry>
  
</feed>
